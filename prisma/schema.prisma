// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                     String                   @id @default(cuid())
  name                   String?
  email                  String?                  @unique
  emailVerified          DateTime?                @map("email_verified")
  image                  String?
  accounts               Account[]
  sessions               Session[]
  orders                 Order[]
  UserFavoriteRestaurant UserFavoriteRestaurant[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Restaurant {
  id                 String                   @id @default(uuid())
  name               String
  imageURL           String
  deliverfee         Decimal                  @db.Decimal(10, 2)
  deliverTimeMinutes Int
  categories         Category[]
  products           Product[]
  orders             Order[]
  usersWhoFavorited  UserFavoriteRestaurant[]
}

model UserFavoriteRestaurant {
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  createdAt    DateTime   @default(now())

  @@id([userId, restaurantId])
}

model Category {
  id          String       @id @default(uuid())
  name        String
  imageURL    String
  restaurants Restaurant[]
  products    Product[]
  createdAt   DateTime     @default(now())
}

model Product {
  id                 String          @id @default(uuid())
  name               String
  description        String
  imageURL           String
  price              Decimal         @db.Decimal(10, 2)
  discountPercentage Int             @default(0)
  restautantId       String
  restaurant         Restaurant      @relation(fields: [restautantId], references: [id])
  categoryId         String
  category           Category        @relation(fields: [categoryId], references: [id])
  createAt           DateTime        @default(now())
  OrderProducts      OrderProducts[]
}

model OrderProducts {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
}

model Order {
  id                 String          @id @default(uuid())
  userId             String
  user               User            @relation(fields: [userId], references: [id])
  products           OrderProducts[]
  restaurant         Restaurant      @relation(fields: [restaurantId], references: [id])
  restaurantId       String
  deliverfee         Decimal         @db.Decimal(10, 2)
  deliverTimeMinutes Int
  subtotalPrice      Decimal         @db.Decimal(10, 2)
  totalPrice         Decimal         @db.Decimal(10, 2)
  totalDiscounts     Decimal         @db.Decimal(10, 2)
  createAt           DateTime        @default(now())
  status             OrderStatus
}

enum OrderStatus {
  CONFIRMED
  PREPARING
  CANCELED
  DELIVERING
  COMPLETED
}
